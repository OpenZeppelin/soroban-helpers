use dotenv::from_path;
use ed25519_dalek::SigningKey;
use soroban_rs::{
    Account, AuthorizedCallsForContract, ClientContractConfigs, Env, EnvConfigs, Guard, IntoScVal,
    Signer,
};
use soroban_rs_macros::soroban;
use std::{env, path::Path};
use stellar_strkey::{Contract as ContractId, ed25519::PrivateKey};

// generates TokenMockClient binding TokenMock contract.
soroban!("fixtures/lib.rs");

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    from_path(Path::new("examples/.env")).ok();

    // Loads the private key from the .env file
    let private_key_str =
        env::var("SOROBAN_PRIVATE_KEY_1").expect("SOROBAN_PRIVATE_KEY must be set in .env file");
    let private_key = PrivateKey::from_string(&private_key_str).expect("Invalid private key");

    // Converts the private key to a signing key
    let signing_key = SigningKey::from_bytes(&private_key.0);

    // Creates a new environment
    let env = Env::new(EnvConfigs {
        rpc_url: "https://soroban-testnet.stellar.org".to_string(),
        network_passphrase: "Test SDF Network ; September 2015".to_string(),
    })?;

    // Initializes a new account
    let mut account = Account::single(Signer::new(signing_key));

    // Get the contract ID from env (this would be obtained from the deploy step)
    let contract_id =
        ContractId::from_string("CD6FS7UDM5J6XDDTUBZCVKLRRKYHVOE3B4OX5W3JEBV6QBR2HSGWRMBC")?;

    // Sets the authorized calls for the account
    let contract_calls_guard = Guard::AuthorizedCallsFor(AuthorizedCallsForContract {
        contract_id,
        remaining: 1,
    });
    account.add_guard(contract_calls_guard);

    // Initialize contract with existing contract ID
    let client_configs = ClientContractConfigs {
        contract_id,
        env: env.clone(),
        source_account: account.clone(),
    };

    // TokenMockClient is autogenerated using soroban!("fixtures/lib.rs");
    let mut token = TokenMockClient::new(&client_configs);

    // Calls send function in contract from Alice and Bob
    let alice = account.account_id().try_into_val()?;
    let bob = account.account_id().try_into_val()?;

    let invoke_res = token.send(alice, bob).await?;

    println!("Result value: {:?}", invoke_res.get_return_value());
    Ok(())
}
